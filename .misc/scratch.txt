/*TODO
    Adding materials to Model: the way we are currently handling this
    is quite... meh. Dont pre-size the Model._submeshMaterials
    it's too error prone.
    Instead do Model._submeshMaterials.push_back()

    [Suggestions]:
        - global asset hash maps ?
            each time a model is created, the global Meshes hash table will be checked
            if no entry for that model, it'll create one


    ---------------------------ANIMATION STUFF-------------------------
    - how to find the root joint? :
        the root joint is the last element in the data->nodes[] array

    - each joint has a matrix called inverseBindMatrix
            transforms vertices into the local space of the joint

    - "each joint node may have a local tranform and an array of children"
    - "the bones of the skeleton are given implicitly, as the connections between the joints"

    - JOINTS_0 & WEIGHTS_0 refer to an accessor
        JOINTS_0 contains the indices of the joints affecting the vertex: 8bit vec4(j0, j1, j2, j3)
        WIGHTS_0 defines the weights: vec4(w0, w1, w2, w3)
        from these informations the "Skinning Matrix" can be computed
            see "Computing the skinning matrix"

    - reading:
        - https://gamemath.com/book/multiplespaces.html
        - https://www.khronos.org/opengl/wiki/Skeletal_Animation
        - https://www.freecodecamp.org/news/advanced-opengl-animation-technique-skeletal-animations/
        - https://moddb.fandom.com/wiki/OpenGL:Tutorials:Basic_Bones_System#How_does_a_bone_system_work?
        - https://www.gamedev.net/forums/topic/706777-optimizing-skeletal-animation-system/
*/


// https://github.com/KhronosGroup/glTF-Tutorials/blob/master/gltfTutorial/gltfTutorial_004_ScenesNodes.md
// https://kcoley.github.io/glTF/specification/2.0/figures/gltfOverview-2.0.0a.png
// https://www.khronos.org/files/gltf20-reference-guide.pdf
// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html

----------------------------------------

JointMatrices[j] = inverse(globalTransform) * globalJointTransforms[j] * inverseBindMatrices[j]

--

https://www.khronos.org/registry/OpenGL/extensions/KHR/KHR_debug.txt


VAO
VBO
IBO
model matrix

I need a vertex array that i'm gonna transfer
into a vertex buffer

ultimately, it has to go through the pipeline,
through the vertex assembly state, vertex shader, rasterizer
then fragment shader and eventually end up in a framebuffer
that will be presented to the screen.

to do that, I have to specify to those stages what my vertex data
is going to look like;


## Maths
The dot product between two (three-component) vectors returns a
scalar that is the cosine of the angle between the two vectors scaled by
the product of their lengths.

dot(A, B) = cos(ANGLE_BETWEEN_A_B)
ANGLE_BETWEEN_A_B = acos(DOT(A,B))

http://asliceofrendering.com/scene%20helper/2020/01/05/InfiniteGrid/
https://gist.github.com/ChrisDill/291c938605c200d079a88d0a7855f31a
compile as a seperate dll


