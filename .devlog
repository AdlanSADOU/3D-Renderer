
9/1/2022
Flexibility vs performance/processing time tradeoff.
The rendering system uses cached glTF asset's binary blobs
as is. no processing needed.



9/3/2022
I never really felt comfortable in how I managed header files until now.
Given that I've been programming for 5+ years.

As my projects start to grow, I get this uneasy feeling that
header files are going out of hand.

So this time I decided to give it some serious thought and I think
I found a simple way that works for how I like to do things on my projects.
It should also work for any project out there.

A little background that will serve the point:

I do not plan in advance for "objects" of any kind. I will just
flat out write the code in a sequential manner that does the
thing I want. Which lets me get right to the point of figuring
out how this particular feature might work in its simplest form.
Without getting bogged down by OOP philosophies.
Since OOP mostly only adds structural problems, they can come later.

Once it works, I can look at it as a whole, reason about it
and simplify it further if possible.

At this point I have a pretty good grasp on how this particular
feature works and it puts me in an excellent position
to factor this code/feature out to whatever architecture the codebase
I'm working with adheres to, or whatever OOP paradigm I have to use.

Now back to header files. I figured that starting a project
as a unity build leads itself really well to the process
I have described.

I will tipycally have a top level header that contains all shared includes
and forward declerations.

This top level header will be included in the single .cpp file I'm working with.
And in between these two I have header files that contain work-in-progress
features with structs/classes and function implementations.

Once I'm happy with how a feature turned out, I can now easily
isolate that as its own pair of .h/.cpp files in a way that satisfies
the project's requirements.

Now there might be problems with this approach that I haven't thought of
or encoutered yet, but I'll deal with those as they arise and adapt.
